You can extend a class to provide a more specialized behavior.
A class that extends another class inherits all the methods and properties of the extended class. In addition, the extending class can override the existing virtual methods by using the override keyword in the method definition. Overriding a virtual method allows you to provide a different implementation for an existing method. This means that the behavior of a particular method is different based on the object youâ€™re calling it on. This is referred to as polymorphism.

A class extends another class using the extends keyword in the class definition. A class can only extend one other class, but it can implement more than one interface.

In parent class :

public virtual class Parent {
	String fname = 'Shankar';
    Integer fage = 55;
    public String mname = 'Kanchana';
    public Integer mage = 50;
    public void alive(){
        System.debug('My father is alive and his name is '+fname+' and age is '+fage);
    }
    public virtual void dead(){
        System.debug('My Mother is dead and her name was '+mname+' and age at present if she had been alive would be '+mage);
    }
}

In child class:

public class Child extends Parent {
    String name = 'Raghav';
    Integer age = 25;
    public Child(){
        System.debug('The child\'s name is '+name+' and age is '+age);
    }
    public override void dead(){
        System.debug('My mother whose name was '+mname+' and whose age at present if she would\'ve been alive is '+mage+' and if rebirth is true, she will be reborn to her son '+name+' who is now '+age+' years of age');
     	
    }
}

In exec anonymous window:

Parent p = new Parent();
p.alive();
p.dead();
Parent c = new Child(); // Can create an obj for child class with refernce to the parent class(virtual) and also this executes the                             constructor method block in child class.
c.dead(); // Overrides the exisitng method in parent class and displays the md in child class
